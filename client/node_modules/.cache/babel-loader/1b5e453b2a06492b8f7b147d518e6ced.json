{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rennud\\\\Desktop\\\\select_query_app\\\\client\\\\src\\\\CodeEditor.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Prism from \"prismjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = props => {\n  _s();\n\n  const [content, setContent] = useState(props.content);\n\n  const handleKeyDown = evt => {\n    let value = content,\n        selStartPos = evt.currentTarget.selectionStart;\n    console.log(evt.currentTarget); // handle 4-space indent on\n\n    if (evt.key === \"Tab\") {\n      value = value.substring(0, selStartPos) + \"    \" + value.substring(selStartPos, value.length);\n      evt.currentTarget.selectionStart = selStartPos + 3;\n      evt.currentTarget.selectionEnd = selStartPos + 4;\n      evt.preventDefault();\n      setContent(value);\n    }\n  };\n\n  useEffect(() => {\n    Prism.highlightAll();\n  }, [props.language, content]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-edit-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"code-input\",\n      value: content,\n      onChange: evt => setContent(evt.target.value),\n      onKeyDown: handleKeyDown\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      className: \"code-output\",\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        className: `language-${props.language}`,\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeEditor, \"EP9+P9jWrkWD3MCQURCiZjgsMjY=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["C:/Users/Rennud/Desktop/select_query_app/client/src/CodeEditor.tsx"],"names":["React","useState","useEffect","Prism","CodeEditor","props","content","setContent","handleKeyDown","evt","value","selStartPos","currentTarget","selectionStart","console","log","key","substring","length","selectionEnd","preventDefault","highlightAll","language","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAA4C;AAAA;;AAC7D,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAACI,KAAK,CAACC,OAAP,CAAtC;;AAEA,QAAME,aAAa,GAAIC,GAAD,IAIhB;AACJ,QAAIC,KAAK,GAAGJ,OAAZ;AAAA,QACEK,WAAW,GAAGF,GAAG,CAACG,aAAJ,CAAkBC,cADlC;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACG,aAAhB,EAJI,CAMJ;;AACA,QAAIH,GAAG,CAACO,GAAJ,KAAY,KAAhB,EAAuB;AACrBN,MAAAA,KAAK,GACHA,KAAK,CAACO,SAAN,CAAgB,CAAhB,EAAmBN,WAAnB,IACA,MADA,GAEAD,KAAK,CAACO,SAAN,CAAgBN,WAAhB,EAA6BD,KAAK,CAACQ,MAAnC,CAHF;AAIAT,MAAAA,GAAG,CAACG,aAAJ,CAAkBC,cAAlB,GAAmCF,WAAW,GAAG,CAAjD;AACAF,MAAAA,GAAG,CAACG,aAAJ,CAAkBO,YAAlB,GAAiCR,WAAW,GAAG,CAA/C;AACAF,MAAAA,GAAG,CAACW,cAAJ;AAEAb,MAAAA,UAAU,CAACG,KAAD,CAAV;AACD;AACF,GAtBD;;AAwBAR,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,KAAK,CAACkB,YAAN;AACD,GAFQ,EAEN,CAAChB,KAAK,CAACiB,QAAP,EAAiBhB,OAAjB,CAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,KAAK,EAAEA,OAFT;AAGE,MAAA,QAAQ,EAAGG,GAAD,IAASF,UAAU,CAACE,GAAG,CAACc,MAAJ,CAAWb,KAAZ,CAH/B;AAIE,MAAA,SAAS,EAAEF;AAJb;AAAA;AAAA;AAAA;AAAA,YADF,eAOE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,6BACE;AAAM,QAAA,SAAS,EAAG,YAAWH,KAAK,CAACiB,QAAS,EAA5C;AAAA,kBAAgDhB;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA5CD;;GAAMF,U;;KAAAA,U;AA8CN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Prism from \"prismjs\";\r\n\r\nconst CodeEditor = (props: { content: any; language: any }) => {\r\n  const [content, setContent] = useState(props.content);\r\n\r\n  const handleKeyDown = (evt: {\r\n    currentTarget: { selectionStart: any; selectionEnd: any };\r\n    key: string;\r\n    preventDefault: () => void;\r\n  }) => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    console.log(evt.currentTarget);\r\n\r\n    // handle 4-space indent on\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    Prism.highlightAll();\r\n  }, [props.language, content]);\r\n\r\n  return (\r\n    <div className=\"code-edit-container\">\r\n      <textarea\r\n        className=\"code-input\"\r\n        value={content}\r\n        onChange={(evt) => setContent(evt.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n      />\r\n      <pre className=\"code-output\">\r\n        <code className={`language-${props.language}`}>{content}</code>\r\n      </pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeEditor;\r\n"]},"metadata":{},"sourceType":"module"}