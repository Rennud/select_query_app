{"ast":null,"code":"/*\nLanguage: Julia\nDescription: Julia is a high-level, high-performance, dynamic programming language.\nAuthor: Kenta Sato <bicycle1885@gmail.com>\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\nWebsite: https://julialang.org\n*/\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  const VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*'; // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  const KEYWORD_LIST = ['baremodule', 'begin', 'break', 'catch', 'ccall', 'const', 'continue', 'do', 'else', 'elseif', 'end', 'export', 'false', 'finally', 'for', 'function', 'global', 'if', 'import', 'in', 'isa', 'let', 'local', 'macro', 'module', 'quote', 'return', 'true', 'try', 'using', 'where', 'while']; // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  const LITERAL_LIST = ['ARGS', 'C_NULL', 'DEPOT_PATH', 'ENDIAN_BOM', 'ENV', 'Inf', 'Inf16', 'Inf32', 'Inf64', 'InsertionSort', 'LOAD_PATH', 'MergeSort', 'NaN', 'NaN16', 'NaN32', 'NaN64', 'PROGRAM_FILE', 'QuickSort', 'RoundDown', 'RoundFromZero', 'RoundNearest', 'RoundNearestTiesAway', 'RoundNearestTiesUp', 'RoundToZero', 'RoundUp', 'VERSION|0', 'devnull', 'false', 'im', 'missing', 'nothing', 'pi', 'stderr', 'stdin', 'stdout', 'true', 'undef', 'π', 'ℯ']; // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  const BUILT_IN_LIST = ['AbstractArray', 'AbstractChannel', 'AbstractChar', 'AbstractDict', 'AbstractDisplay', 'AbstractFloat', 'AbstractIrrational', 'AbstractMatrix', 'AbstractRange', 'AbstractSet', 'AbstractString', 'AbstractUnitRange', 'AbstractVecOrMat', 'AbstractVector', 'Any', 'ArgumentError', 'Array', 'AssertionError', 'BigFloat', 'BigInt', 'BitArray', 'BitMatrix', 'BitSet', 'BitVector', 'Bool', 'BoundsError', 'CapturedException', 'CartesianIndex', 'CartesianIndices', 'Cchar', 'Cdouble', 'Cfloat', 'Channel', 'Char', 'Cint', 'Cintmax_t', 'Clong', 'Clonglong', 'Cmd', 'Colon', 'Complex', 'ComplexF16', 'ComplexF32', 'ComplexF64', 'CompositeException', 'Condition', 'Cptrdiff_t', 'Cshort', 'Csize_t', 'Cssize_t', 'Cstring', 'Cuchar', 'Cuint', 'Cuintmax_t', 'Culong', 'Culonglong', 'Cushort', 'Cvoid', 'Cwchar_t', 'Cwstring', 'DataType', 'DenseArray', 'DenseMatrix', 'DenseVecOrMat', 'DenseVector', 'Dict', 'DimensionMismatch', 'Dims', 'DivideError', 'DomainError', 'EOFError', 'Enum', 'ErrorException', 'Exception', 'ExponentialBackOff', 'Expr', 'Float16', 'Float32', 'Float64', 'Function', 'GlobalRef', 'HTML', 'IO', 'IOBuffer', 'IOContext', 'IOStream', 'IdDict', 'IndexCartesian', 'IndexLinear', 'IndexStyle', 'InexactError', 'InitError', 'Int', 'Int128', 'Int16', 'Int32', 'Int64', 'Int8', 'Integer', 'InterruptException', 'InvalidStateException', 'Irrational', 'KeyError', 'LinRange', 'LineNumberNode', 'LinearIndices', 'LoadError', 'MIME', 'Matrix', 'Method', 'MethodError', 'Missing', 'MissingException', 'Module', 'NTuple', 'NamedTuple', 'Nothing', 'Number', 'OrdinalRange', 'OutOfMemoryError', 'OverflowError', 'Pair', 'PartialQuickSort', 'PermutedDimsArray', 'Pipe', 'ProcessFailedException', 'Ptr', 'QuoteNode', 'Rational', 'RawFD', 'ReadOnlyMemoryError', 'Real', 'ReentrantLock', 'Ref', 'Regex', 'RegexMatch', 'RoundingMode', 'SegmentationFault', 'Set', 'Signed', 'Some', 'StackOverflowError', 'StepRange', 'StepRangeLen', 'StridedArray', 'StridedMatrix', 'StridedVecOrMat', 'StridedVector', 'String', 'StringIndexError', 'SubArray', 'SubString', 'SubstitutionString', 'Symbol', 'SystemError', 'Task', 'TaskFailedException', 'Text', 'TextDisplay', 'Timer', 'Tuple', 'Type', 'TypeError', 'TypeVar', 'UInt', 'UInt128', 'UInt16', 'UInt32', 'UInt64', 'UInt8', 'UndefInitializer', 'UndefKeywordError', 'UndefRefError', 'UndefVarError', 'Union', 'UnionAll', 'UnitRange', 'Unsigned', 'Val', 'Vararg', 'VecElement', 'VecOrMat', 'Vector', 'VersionNumber', 'WeakKeyDict', 'WeakRef'];\n  const KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST\n  }; // placeholder for recursive self-reference\n\n  const DEFAULT = {\n    keywords: KEYWORDS,\n    illegal: /<\\//\n  }; // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n\n  const NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n  const CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n  const INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n  const INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  }; // TODO: neatly escape normal code in string literal\n\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [{\n      begin: /\\w*\"\"\"/,\n      end: /\"\"\"\\w*/,\n      relevance: 10\n    }, {\n      begin: /\\w*\"/,\n      end: /\"\\w*/\n    }]\n  };\n  const COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`',\n    end: '`'\n  };\n  const MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n  const COMMENT = {\n    className: 'comment',\n    variants: [{\n      begin: '#=',\n      end: '=#',\n      relevance: 10\n    }, {\n      begin: '#',\n      end: '$'\n    }]\n  };\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [NUMBER, CHAR, STRING, COMMAND, MACROCALL, COMMENT, hljs.HASH_COMMENT_MODE, {\n    className: 'keyword',\n    begin: '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n  }, {\n    begin: /<:/\n  } // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n  return DEFAULT;\n}\n\nmodule.exports = julia;","map":{"version":3,"sources":["C:/Users/Rennud/node_modules/highlight.js/lib/languages/julia.js"],"names":["julia","hljs","VARIABLE_NAME_RE","KEYWORD_LIST","LITERAL_LIST","BUILT_IN_LIST","KEYWORDS","$pattern","keyword","literal","built_in","DEFAULT","keywords","illegal","NUMBER","className","begin","relevance","CHAR","INTERPOLATION","end","INTERPOLATED_VARIABLE","STRING","contains","BACKSLASH_ESCAPE","variants","COMMAND","MACROCALL","COMMENT","name","HASH_COMMENT_MODE","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: Julia\nDescription: Julia is a high-level, high-performance, dynamic programming language.\nAuthor: Kenta Sato <bicycle1885@gmail.com>\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\nWebsite: https://julialang.org\n*/\n\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  const VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  const KEYWORD_LIST = [\n    'baremodule',\n    'begin',\n    'break',\n    'catch',\n    'ccall',\n    'const',\n    'continue',\n    'do',\n    'else',\n    'elseif',\n    'end',\n    'export',\n    'false',\n    'finally',\n    'for',\n    'function',\n    'global',\n    'if',\n    'import',\n    'in',\n    'isa',\n    'let',\n    'local',\n    'macro',\n    'module',\n    'quote',\n    'return',\n    'true',\n    'try',\n    'using',\n    'where',\n    'while',\n  ];\n\n  // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  const LITERAL_LIST = [\n    'ARGS',\n    'C_NULL',\n    'DEPOT_PATH',\n    'ENDIAN_BOM',\n    'ENV',\n    'Inf',\n    'Inf16',\n    'Inf32',\n    'Inf64',\n    'InsertionSort',\n    'LOAD_PATH',\n    'MergeSort',\n    'NaN',\n    'NaN16',\n    'NaN32',\n    'NaN64',\n    'PROGRAM_FILE',\n    'QuickSort',\n    'RoundDown',\n    'RoundFromZero',\n    'RoundNearest',\n    'RoundNearestTiesAway',\n    'RoundNearestTiesUp',\n    'RoundToZero',\n    'RoundUp',\n    'VERSION|0',\n    'devnull',\n    'false',\n    'im',\n    'missing',\n    'nothing',\n    'pi',\n    'stderr',\n    'stdin',\n    'stdout',\n    'true',\n    'undef',\n    'π',\n    'ℯ',\n  ];\n\n  // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  const BUILT_IN_LIST = [\n    'AbstractArray',\n    'AbstractChannel',\n    'AbstractChar',\n    'AbstractDict',\n    'AbstractDisplay',\n    'AbstractFloat',\n    'AbstractIrrational',\n    'AbstractMatrix',\n    'AbstractRange',\n    'AbstractSet',\n    'AbstractString',\n    'AbstractUnitRange',\n    'AbstractVecOrMat',\n    'AbstractVector',\n    'Any',\n    'ArgumentError',\n    'Array',\n    'AssertionError',\n    'BigFloat',\n    'BigInt',\n    'BitArray',\n    'BitMatrix',\n    'BitSet',\n    'BitVector',\n    'Bool',\n    'BoundsError',\n    'CapturedException',\n    'CartesianIndex',\n    'CartesianIndices',\n    'Cchar',\n    'Cdouble',\n    'Cfloat',\n    'Channel',\n    'Char',\n    'Cint',\n    'Cintmax_t',\n    'Clong',\n    'Clonglong',\n    'Cmd',\n    'Colon',\n    'Complex',\n    'ComplexF16',\n    'ComplexF32',\n    'ComplexF64',\n    'CompositeException',\n    'Condition',\n    'Cptrdiff_t',\n    'Cshort',\n    'Csize_t',\n    'Cssize_t',\n    'Cstring',\n    'Cuchar',\n    'Cuint',\n    'Cuintmax_t',\n    'Culong',\n    'Culonglong',\n    'Cushort',\n    'Cvoid',\n    'Cwchar_t',\n    'Cwstring',\n    'DataType',\n    'DenseArray',\n    'DenseMatrix',\n    'DenseVecOrMat',\n    'DenseVector',\n    'Dict',\n    'DimensionMismatch',\n    'Dims',\n    'DivideError',\n    'DomainError',\n    'EOFError',\n    'Enum',\n    'ErrorException',\n    'Exception',\n    'ExponentialBackOff',\n    'Expr',\n    'Float16',\n    'Float32',\n    'Float64',\n    'Function',\n    'GlobalRef',\n    'HTML',\n    'IO',\n    'IOBuffer',\n    'IOContext',\n    'IOStream',\n    'IdDict',\n    'IndexCartesian',\n    'IndexLinear',\n    'IndexStyle',\n    'InexactError',\n    'InitError',\n    'Int',\n    'Int128',\n    'Int16',\n    'Int32',\n    'Int64',\n    'Int8',\n    'Integer',\n    'InterruptException',\n    'InvalidStateException',\n    'Irrational',\n    'KeyError',\n    'LinRange',\n    'LineNumberNode',\n    'LinearIndices',\n    'LoadError',\n    'MIME',\n    'Matrix',\n    'Method',\n    'MethodError',\n    'Missing',\n    'MissingException',\n    'Module',\n    'NTuple',\n    'NamedTuple',\n    'Nothing',\n    'Number',\n    'OrdinalRange',\n    'OutOfMemoryError',\n    'OverflowError',\n    'Pair',\n    'PartialQuickSort',\n    'PermutedDimsArray',\n    'Pipe',\n    'ProcessFailedException',\n    'Ptr',\n    'QuoteNode',\n    'Rational',\n    'RawFD',\n    'ReadOnlyMemoryError',\n    'Real',\n    'ReentrantLock',\n    'Ref',\n    'Regex',\n    'RegexMatch',\n    'RoundingMode',\n    'SegmentationFault',\n    'Set',\n    'Signed',\n    'Some',\n    'StackOverflowError',\n    'StepRange',\n    'StepRangeLen',\n    'StridedArray',\n    'StridedMatrix',\n    'StridedVecOrMat',\n    'StridedVector',\n    'String',\n    'StringIndexError',\n    'SubArray',\n    'SubString',\n    'SubstitutionString',\n    'Symbol',\n    'SystemError',\n    'Task',\n    'TaskFailedException',\n    'Text',\n    'TextDisplay',\n    'Timer',\n    'Tuple',\n    'Type',\n    'TypeError',\n    'TypeVar',\n    'UInt',\n    'UInt128',\n    'UInt16',\n    'UInt32',\n    'UInt64',\n    'UInt8',\n    'UndefInitializer',\n    'UndefKeywordError',\n    'UndefRefError',\n    'UndefVarError',\n    'Union',\n    'UnionAll',\n    'UnitRange',\n    'Unsigned',\n    'Val',\n    'Vararg',\n    'VecElement',\n    'VecOrMat',\n    'Vector',\n    'VersionNumber',\n    'WeakKeyDict',\n    'WeakRef',\n  ];\n\n  const KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST,\n  };\n\n  // placeholder for recursive self-reference\n  const DEFAULT = {\n    keywords: KEYWORDS,\n    illegal: /<\\//\n  };\n\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n  const NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n\n  const CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n\n  const INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n\n  const INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      INTERPOLATION,\n      INTERPOLATED_VARIABLE\n    ],\n    variants: [\n      {\n        begin: /\\w*\"\"\"/,\n        end: /\"\"\"\\w*/,\n        relevance: 10\n      },\n      {\n        begin: /\\w*\"/,\n        end: /\"\\w*/\n      }\n    ]\n  };\n\n  const COMMAND = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      INTERPOLATION,\n      INTERPOLATED_VARIABLE\n    ],\n    begin: '`',\n    end: '`'\n  };\n\n  const MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n\n  const COMMENT = {\n    className: 'comment',\n    variants: [\n      {\n        begin: '#=',\n        end: '=#',\n        relevance: 10\n      },\n      {\n        begin: '#',\n        end: '$'\n      }\n    ]\n  };\n\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [\n    NUMBER,\n    CHAR,\n    STRING,\n    COMMAND,\n    MACROCALL,\n    COMMENT,\n    hljs.HASH_COMMENT_MODE,\n    {\n      className: 'keyword',\n      begin:\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n    },\n    { begin: /<:/ } // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n\n  return DEFAULT;\n}\n\nmodule.exports = julia;\n"]},"metadata":{},"sourceType":"script"}