{"ast":null,"code":"/*\nLanguage: Lisp\nDescription: Generic lisp syntax\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nCategory: lisp\n*/\nfunction lisp(hljs) {\n  const LISP_IDENT_RE = '[a-zA-Z_\\\\-+\\\\*\\\\/<=>&#][a-zA-Z0-9_\\\\-+*\\\\/<=>&#!]*';\n  const MEC_RE = '\\\\|[^]*?\\\\|';\n  const LISP_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|-)?\\\\d+)?';\n  const LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: LISP_SIMPLE_NUMBER_RE,\n      relevance: 0\n    }, {\n      begin: '#(b|B)[0-1]+(/[0-1]+)?'\n    }, {\n      begin: '#(o|O)[0-7]+(/[0-7]+)?'\n    }, {\n      begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?'\n    }, {\n      begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,\n      end: '\\\\)'\n    }]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, {\n    illegal: null\n  });\n  const COMMENT = hljs.COMMENT(';', '$', {\n    relevance: 0\n  });\n  const VARIABLE = {\n    begin: '\\\\*',\n    end: '\\\\*'\n  };\n  const KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  const IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  const MEC = {\n    begin: MEC_RE\n  };\n  const QUOTED_LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: ['self', LITERAL, STRING, NUMBER, IDENT]\n  };\n  const QUOTED = {\n    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],\n    variants: [{\n      begin: '[\\'`]\\\\(',\n      end: '\\\\)'\n    }, {\n      begin: '\\\\(quote ',\n      end: '\\\\)',\n      keywords: {\n        name: 'quote'\n      }\n    }, {\n      begin: '\\'' + MEC_RE\n    }]\n  };\n  const QUOTED_ATOM = {\n    variants: [{\n      begin: '\\'' + LISP_IDENT_RE\n    }, {\n      begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*'\n    }]\n  };\n  const LIST = {\n    begin: '\\\\(\\\\s*',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [{\n    className: 'name',\n    variants: [{\n      begin: LISP_IDENT_RE,\n      relevance: 0\n    }, {\n      begin: MEC_RE\n    }]\n  }, BODY];\n  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT, VARIABLE, KEYWORD, MEC, IDENT];\n  return {\n    name: 'Lisp',\n    illegal: /\\S/,\n    contains: [NUMBER, hljs.SHEBANG(), LITERAL, STRING, COMMENT, QUOTED, QUOTED_ATOM, LIST, IDENT]\n  };\n}\n\nmodule.exports = lisp;","map":{"version":3,"sources":["C:/Users/Rennud/node_modules/highlight.js/lib/languages/lisp.js"],"names":["lisp","hljs","LISP_IDENT_RE","MEC_RE","LISP_SIMPLE_NUMBER_RE","LITERAL","className","begin","NUMBER","variants","relevance","end","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","VARIABLE","KEYWORD","IDENT","MEC","QUOTED_LIST","contains","QUOTED","keywords","name","QUOTED_ATOM","LIST","BODY","endsWithParent","SHEBANG","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,IAAT,CAAcC,IAAd,EAAoB;AAClB,QAAMC,aAAa,GAAG,qDAAtB;AACA,QAAMC,MAAM,GAAG,aAAf;AACA,QAAMC,qBAAqB,GAAG,oEAA9B;AACA,QAAMC,OAAO,GAAG;AACdC,IAAAA,SAAS,EAAE,SADG;AAEdC,IAAAA,KAAK,EAAE;AAFO,GAAhB;AAIA,QAAMC,MAAM,GAAG;AACbF,IAAAA,SAAS,EAAE,QADE;AAEbG,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAEH,qBADT;AAEEM,MAAAA,SAAS,EAAE;AAFb,KADQ,EAKR;AAAEH,MAAAA,KAAK,EAAE;AAAT,KALQ,EAMR;AAAEA,MAAAA,KAAK,EAAE;AAAT,KANQ,EAOR;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAPQ,EAQR;AACEA,MAAAA,KAAK,EAAE,cAAcH,qBAAd,GAAsC,IAAtC,GAA6CA,qBADtD;AAEEO,MAAAA,GAAG,EAAE;AAFP,KARQ;AAFG,GAAf;AAgBA,QAAMC,MAAM,GAAGX,IAAI,CAACY,OAAL,CAAaZ,IAAI,CAACa,iBAAlB,EAAqC;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArC,CAAf;AACA,QAAMC,OAAO,GAAGf,IAAI,CAACe,OAAL,CACd,GADc,EACT,GADS,EAEd;AAAEN,IAAAA,SAAS,EAAE;AAAb,GAFc,CAAhB;AAIA,QAAMO,QAAQ,GAAG;AACfV,IAAAA,KAAK,EAAE,KADQ;AAEfI,IAAAA,GAAG,EAAE;AAFU,GAAjB;AAIA,QAAMO,OAAO,GAAG;AACdZ,IAAAA,SAAS,EAAE,QADG;AAEdC,IAAAA,KAAK,EAAE,SAASL;AAFF,GAAhB;AAIA,QAAMiB,KAAK,GAAG;AACZZ,IAAAA,KAAK,EAAEL,aADK;AAEZQ,IAAAA,SAAS,EAAE;AAFC,GAAd;AAIA,QAAMU,GAAG,GAAG;AAAEb,IAAAA,KAAK,EAAEJ;AAAT,GAAZ;AACA,QAAMkB,WAAW,GAAG;AAClBd,IAAAA,KAAK,EAAE,KADW;AAElBI,IAAAA,GAAG,EAAE,KAFa;AAGlBW,IAAAA,QAAQ,EAAE,CACR,MADQ,EAERjB,OAFQ,EAGRO,MAHQ,EAIRJ,MAJQ,EAKRW,KALQ;AAHQ,GAApB;AAWA,QAAMI,MAAM,GAAG;AACbD,IAAAA,QAAQ,EAAE,CACRd,MADQ,EAERI,MAFQ,EAGRK,QAHQ,EAIRC,OAJQ,EAKRG,WALQ,EAMRF,KANQ,CADG;AASbV,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAE,UADT;AAEEI,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACEJ,MAAAA,KAAK,EAAE,WADT;AAEEI,MAAAA,GAAG,EAAE,KAFP;AAGEa,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR;AAHZ,KALQ,EAUR;AAAElB,MAAAA,KAAK,EAAE,OAAOJ;AAAhB,KAVQ;AATG,GAAf;AAsBA,QAAMuB,WAAW,GAAG;AAAEjB,IAAAA,QAAQ,EAAE,CAC9B;AAAEF,MAAAA,KAAK,EAAE,OAAOL;AAAhB,KAD8B,EAE9B;AAAEK,MAAAA,KAAK,EAAE,QAAQL,aAAR,GAAwB,KAAxB,GAAgCA,aAAhC,GAAgD;AAAzD,KAF8B;AAAZ,GAApB;AAIA,QAAMyB,IAAI,GAAG;AACXpB,IAAAA,KAAK,EAAE,SADI;AAEXI,IAAAA,GAAG,EAAE;AAFM,GAAb;AAIA,QAAMiB,IAAI,GAAG;AACXC,IAAAA,cAAc,EAAE,IADL;AAEXnB,IAAAA,SAAS,EAAE;AAFA,GAAb;AAIAiB,EAAAA,IAAI,CAACL,QAAL,GAAgB,CACd;AACEhB,IAAAA,SAAS,EAAE,MADb;AAEEG,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,KAAK,EAAEL,aADT;AAEEQ,MAAAA,SAAS,EAAE;AAFb,KADQ,EAKR;AAAEH,MAAAA,KAAK,EAAEJ;AAAT,KALQ;AAFZ,GADc,EAWdyB,IAXc,CAAhB;AAaAA,EAAAA,IAAI,CAACN,QAAL,GAAgB,CACdC,MADc,EAEdG,WAFc,EAGdC,IAHc,EAIdtB,OAJc,EAKdG,MALc,EAMdI,MANc,EAOdI,OAPc,EAQdC,QARc,EASdC,OATc,EAUdE,GAVc,EAWdD,KAXc,CAAhB;AAcA,SAAO;AACLM,IAAAA,IAAI,EAAE,MADD;AAELV,IAAAA,OAAO,EAAE,IAFJ;AAGLO,IAAAA,QAAQ,EAAE,CACRd,MADQ,EAERP,IAAI,CAAC6B,OAAL,EAFQ,EAGRzB,OAHQ,EAIRO,MAJQ,EAKRI,OALQ,EAMRO,MANQ,EAORG,WAPQ,EAQRC,IARQ,EASRR,KATQ;AAHL,GAAP;AAeD;;AAEDY,MAAM,CAACC,OAAP,GAAiBhC,IAAjB","sourcesContent":["/*\nLanguage: Lisp\nDescription: Generic lisp syntax\nAuthor: Vasily Polovnyov <vast@whiteants.net>\nCategory: lisp\n*/\n\nfunction lisp(hljs) {\n  const LISP_IDENT_RE = '[a-zA-Z_\\\\-+\\\\*\\\\/<=>&#][a-zA-Z0-9_\\\\-+*\\\\/<=>&#!]*';\n  const MEC_RE = '\\\\|[^]*?\\\\|';\n  const LISP_SIMPLE_NUMBER_RE = '(-|\\\\+)?\\\\d+(\\\\.\\\\d+|\\\\/\\\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\\\+|-)?\\\\d+)?';\n  const LITERAL = {\n    className: 'literal',\n    begin: '\\\\b(t{1}|nil)\\\\b'\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      {\n        begin: LISP_SIMPLE_NUMBER_RE,\n        relevance: 0\n      },\n      { begin: '#(b|B)[0-1]+(/[0-1]+)?' },\n      { begin: '#(o|O)[0-7]+(/[0-7]+)?' },\n      { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },\n      {\n        begin: '#(c|C)\\\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,\n        end: '\\\\)'\n      }\n    ]\n  };\n  const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n  const COMMENT = hljs.COMMENT(\n    ';', '$',\n    { relevance: 0 }\n  );\n  const VARIABLE = {\n    begin: '\\\\*',\n    end: '\\\\*'\n  };\n  const KEYWORD = {\n    className: 'symbol',\n    begin: '[:&]' + LISP_IDENT_RE\n  };\n  const IDENT = {\n    begin: LISP_IDENT_RE,\n    relevance: 0\n  };\n  const MEC = { begin: MEC_RE };\n  const QUOTED_LIST = {\n    begin: '\\\\(',\n    end: '\\\\)',\n    contains: [\n      'self',\n      LITERAL,\n      STRING,\n      NUMBER,\n      IDENT\n    ]\n  };\n  const QUOTED = {\n    contains: [\n      NUMBER,\n      STRING,\n      VARIABLE,\n      KEYWORD,\n      QUOTED_LIST,\n      IDENT\n    ],\n    variants: [\n      {\n        begin: '[\\'`]\\\\(',\n        end: '\\\\)'\n      },\n      {\n        begin: '\\\\(quote ',\n        end: '\\\\)',\n        keywords: { name: 'quote' }\n      },\n      { begin: '\\'' + MEC_RE }\n    ]\n  };\n  const QUOTED_ATOM = { variants: [\n    { begin: '\\'' + LISP_IDENT_RE },\n    { begin: '#\\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }\n  ] };\n  const LIST = {\n    begin: '\\\\(\\\\s*',\n    end: '\\\\)'\n  };\n  const BODY = {\n    endsWithParent: true,\n    relevance: 0\n  };\n  LIST.contains = [\n    {\n      className: 'name',\n      variants: [\n        {\n          begin: LISP_IDENT_RE,\n          relevance: 0,\n        },\n        { begin: MEC_RE }\n      ]\n    },\n    BODY\n  ];\n  BODY.contains = [\n    QUOTED,\n    QUOTED_ATOM,\n    LIST,\n    LITERAL,\n    NUMBER,\n    STRING,\n    COMMENT,\n    VARIABLE,\n    KEYWORD,\n    MEC,\n    IDENT\n  ];\n\n  return {\n    name: 'Lisp',\n    illegal: /\\S/,\n    contains: [\n      NUMBER,\n      hljs.SHEBANG(),\n      LITERAL,\n      STRING,\n      COMMENT,\n      QUOTED,\n      QUOTED_ATOM,\n      LIST,\n      IDENT\n    ]\n  };\n}\n\nmodule.exports = lisp;\n"]},"metadata":{},"sourceType":"script"}