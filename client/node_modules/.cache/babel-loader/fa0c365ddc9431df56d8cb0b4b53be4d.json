{"ast":null,"code":"/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [// TODO: fix to allow these to work with sublanguage also\n    {\n      begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*'\n    }, {\n      begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*'\n    }, // needed to allow markdown as a sublanguage to work\n    {\n      begin: '```',\n      end: '```+[ ]*$'\n    }, {\n      begin: '~~~',\n      end: '~~~+[ ]*$'\n    }, {\n      begin: '`.+?`'\n    }, {\n      begin: '(?=^( {4}|\\\\t))',\n      // use contains to gobble up multiple lines to allow the block to be whatever size\n      // but only have a single open/close tag vs one per line\n      contains: [{\n        begin: '^( {4}|\\\\t)',\n        end: '(\\\\n)$'\n      }],\n      relevance: 0\n    }]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [{\n      className: 'symbol',\n      begin: /\\[/,\n      end: /\\]/,\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'link',\n      begin: /:\\s*/,\n      end: /$/,\n      excludeBegin: true\n    }]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [// too much like nested array access in so many languages\n    // to have any real relevance\n    {\n      begin: /\\[.+?\\]\\[.*?\\]/,\n      relevance: 0\n    }, // popular internet URLs\n    {\n      begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n      relevance: 2\n    }, {\n      begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n      relevance: 2\n    }, // relative urls\n    {\n      begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n      relevance: 1\n    }, // whatever else, lower relevance (might not be a link at all)\n    {\n      begin: /\\[.*?\\]\\(.*?\\)/,\n      relevance: 0\n    }],\n    returnBegin: true,\n    contains: [{\n      // empty strings for alt or link text\n      match: /\\[(?=\\])/\n    }, {\n      className: 'string',\n      relevance: 0,\n      begin: '\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      returnEnd: true\n    }, {\n      className: 'link',\n      relevance: 0,\n      begin: '\\\\]\\\\(',\n      end: '\\\\)',\n      excludeBegin: true,\n      excludeEnd: true\n    }, {\n      className: 'symbol',\n      relevance: 0,\n      begin: '\\\\]\\\\[',\n      end: '\\\\]',\n      excludeBegin: true,\n      excludeEnd: true\n    }]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /_{2}/,\n      end: /_{2}/\n    }, {\n      begin: /\\*{2}/,\n      end: /\\*{2}/\n    }]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [],\n    // defined later\n    variants: [{\n      begin: /\\*(?!\\*)/,\n      end: /\\*/\n    }, {\n      begin: /_(?!_)/,\n      end: /_/,\n      relevance: 0\n    }]\n  }; // 3 level deep nesting is not allowed because it would create confusion\n  // in cases like `***testing***` because where we don't know if the last\n  // `***` is starting a new bold/italic or finishing the last one\n\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, {\n    contains: []\n  });\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, {\n    contains: []\n  });\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n  let CONTAINABLE = [INLINE_HTML, LINK];\n  [BOLD, ITALIC, BOLD_WITHOUT_ITALIC, ITALIC_WITHOUT_BOLD].forEach(m => {\n    m.contains = m.contains.concat(CONTAINABLE);\n  });\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n  const HEADER = {\n    className: 'section',\n    variants: [{\n      begin: '^#{1,6}',\n      end: '$',\n      contains: CONTAINABLE\n    }, {\n      begin: '(?=^.+?\\\\n[=-]{2,}$)',\n      contains: [{\n        begin: '^[=-]*$'\n      }, {\n        begin: '^',\n        end: \"\\\\n\",\n        contains: CONTAINABLE\n      }]\n    }]\n  };\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n  return {\n    name: 'Markdown',\n    aliases: ['md', 'mkdown', 'mkd'],\n    contains: [HEADER, INLINE_HTML, LIST, BOLD, ITALIC, BLOCKQUOTE, CODE, HORIZONTAL_RULE, LINK, LINK_REFERENCE]\n  };\n}\n\nmodule.exports = markdown;","map":{"version":3,"sources":["C:/Users/Rennud/Desktop/select_query_app/client/node_modules/highlight.js/lib/languages/markdown.js"],"names":["markdown","hljs","regex","INLINE_HTML","begin","end","subLanguage","relevance","HORIZONTAL_RULE","CODE","className","variants","contains","LIST","excludeEnd","LINK_REFERENCE","returnBegin","excludeBegin","URL_SCHEME","LINK","concat","match","returnEnd","BOLD","ITALIC","BOLD_WITHOUT_ITALIC","inherit","ITALIC_WITHOUT_BOLD","push","CONTAINABLE","forEach","m","HEADER","BLOCKQUOTE","name","aliases","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAnB;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,KAAK,EAAE,eADW;AAElBC,IAAAA,GAAG,EAAE,GAFa;AAGlBC,IAAAA,WAAW,EAAE,KAHK;AAIlBC,IAAAA,SAAS,EAAE;AAJO,GAApB;AAMA,QAAMC,eAAe,GAAG;AACtBJ,IAAAA,KAAK,EAAE,aADe;AAEtBC,IAAAA,GAAG,EAAE;AAFiB,GAAxB;AAIA,QAAMI,IAAI,GAAG;AACXC,IAAAA,SAAS,EAAE,MADA;AAEXC,IAAAA,QAAQ,EAAE,CACR;AACA;AAAEP,MAAAA,KAAK,EAAE;AAAT,KAFQ,EAGR;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAHQ,EAIR;AACA;AACEA,MAAAA,KAAK,EAAE,KADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KALQ,EASR;AACED,MAAAA,KAAK,EAAE,KADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KATQ,EAaR;AAAED,MAAAA,KAAK,EAAE;AAAT,KAbQ,EAcR;AACEA,MAAAA,KAAK,EAAE,iBADT;AAEE;AACA;AACAQ,MAAAA,QAAQ,EAAE,CACR;AACER,QAAAA,KAAK,EAAE,aADT;AAEEC,QAAAA,GAAG,EAAE;AAFP,OADQ,CAJZ;AAUEE,MAAAA,SAAS,EAAE;AAVb,KAdQ;AAFC,GAAb;AA8BA,QAAMM,IAAI,GAAG;AACXH,IAAAA,SAAS,EAAE,QADA;AAEXN,IAAAA,KAAK,EAAE,kCAFI;AAGXC,IAAAA,GAAG,EAAE,MAHM;AAIXS,IAAAA,UAAU,EAAE;AAJD,GAAb;AAMA,QAAMC,cAAc,GAAG;AACrBX,IAAAA,KAAK,EAAE,cADc;AAErBY,IAAAA,WAAW,EAAE,IAFQ;AAGrBJ,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,SAAS,EAAE,QADb;AAEEN,MAAAA,KAAK,EAAE,IAFT;AAGEC,MAAAA,GAAG,EAAE,IAHP;AAIEY,MAAAA,YAAY,EAAE,IAJhB;AAKEH,MAAAA,UAAU,EAAE;AALd,KADQ,EAQR;AACEJ,MAAAA,SAAS,EAAE,MADb;AAEEN,MAAAA,KAAK,EAAE,MAFT;AAGEC,MAAAA,GAAG,EAAE,GAHP;AAIEY,MAAAA,YAAY,EAAE;AAJhB,KARQ;AAHW,GAAvB;AAmBA,QAAMC,UAAU,GAAG,yBAAnB;AACA,QAAMC,IAAI,GAAG;AACXR,IAAAA,QAAQ,EAAE,CACR;AACA;AACA;AACEP,MAAAA,KAAK,EAAE,gBADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAHQ,EAOR;AACA;AACEH,MAAAA,KAAK,EAAE,+DADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KARQ,EAYR;AACEH,MAAAA,KAAK,EAAEF,KAAK,CAACkB,MAAN,CAAa,WAAb,EAA0BF,UAA1B,EAAsC,YAAtC,CADT;AAEEX,MAAAA,SAAS,EAAE;AAFb,KAZQ,EAgBR;AACA;AACEH,MAAAA,KAAK,EAAE,uBADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAjBQ,EAqBR;AACA;AACEH,MAAAA,KAAK,EAAE,gBADT;AAEEG,MAAAA,SAAS,EAAE;AAFb,KAtBQ,CADC;AA4BXS,IAAAA,WAAW,EAAE,IA5BF;AA6BXJ,IAAAA,QAAQ,EAAE,CACR;AACE;AACAS,MAAAA,KAAK,EAAE;AAFT,KADQ,EAIR;AACEX,MAAAA,SAAS,EAAE,QADb;AAEEH,MAAAA,SAAS,EAAE,CAFb;AAGEH,MAAAA,KAAK,EAAE,KAHT;AAIEC,MAAAA,GAAG,EAAE,KAJP;AAKEY,MAAAA,YAAY,EAAE,IALhB;AAMEK,MAAAA,SAAS,EAAE;AANb,KAJQ,EAYR;AACEZ,MAAAA,SAAS,EAAE,MADb;AAEEH,MAAAA,SAAS,EAAE,CAFb;AAGEH,MAAAA,KAAK,EAAE,QAHT;AAIEC,MAAAA,GAAG,EAAE,KAJP;AAKEY,MAAAA,YAAY,EAAE,IALhB;AAMEH,MAAAA,UAAU,EAAE;AANd,KAZQ,EAoBR;AACEJ,MAAAA,SAAS,EAAE,QADb;AAEEH,MAAAA,SAAS,EAAE,CAFb;AAGEH,MAAAA,KAAK,EAAE,QAHT;AAIEC,MAAAA,GAAG,EAAE,KAJP;AAKEY,MAAAA,YAAY,EAAE,IALhB;AAMEH,MAAAA,UAAU,EAAE;AANd,KApBQ;AA7BC,GAAb;AA2DA,QAAMS,IAAI,GAAG;AACXb,IAAAA,SAAS,EAAE,QADA;AAEXE,IAAAA,QAAQ,EAAE,EAFC;AAEG;AACdD,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,KAAK,EAAE,MADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACED,MAAAA,KAAK,EAAE,OADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KALQ;AAHC,GAAb;AAcA,QAAMmB,MAAM,GAAG;AACbd,IAAAA,SAAS,EAAE,UADE;AAEbE,IAAAA,QAAQ,EAAE,EAFG;AAEC;AACdD,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,GAAG,EAAE;AAFP,KADQ,EAKR;AACED,MAAAA,KAAK,EAAE,QADT;AAEEC,MAAAA,GAAG,EAAE,GAFP;AAGEE,MAAAA,SAAS,EAAE;AAHb,KALQ;AAHG,GAAf,CA7IsB,CA6JtB;AACA;AACA;;AACA,QAAMkB,mBAAmB,GAAGxB,IAAI,CAACyB,OAAL,CAAaH,IAAb,EAAmB;AAAEX,IAAAA,QAAQ,EAAE;AAAZ,GAAnB,CAA5B;AACA,QAAMe,mBAAmB,GAAG1B,IAAI,CAACyB,OAAL,CAAaF,MAAb,EAAqB;AAAEZ,IAAAA,QAAQ,EAAE;AAAZ,GAArB,CAA5B;AACAW,EAAAA,IAAI,CAACX,QAAL,CAAcgB,IAAd,CAAmBD,mBAAnB;AACAH,EAAAA,MAAM,CAACZ,QAAP,CAAgBgB,IAAhB,CAAqBH,mBAArB;AAEA,MAAII,WAAW,GAAG,CAChB1B,WADgB,EAEhBgB,IAFgB,CAAlB;AAKA,GACEI,IADF,EAEEC,MAFF,EAGEC,mBAHF,EAIEE,mBAJF,EAKEG,OALF,CAKUC,CAAC,IAAI;AACbA,IAAAA,CAAC,CAACnB,QAAF,GAAamB,CAAC,CAACnB,QAAF,CAAWQ,MAAX,CAAkBS,WAAlB,CAAb;AACD,GAPD;AASAA,EAAAA,WAAW,GAAGA,WAAW,CAACT,MAAZ,CAAmBG,IAAnB,EAAyBC,MAAzB,CAAd;AAEA,QAAMQ,MAAM,GAAG;AACbtB,IAAAA,SAAS,EAAE,SADE;AAEbC,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,KAAK,EAAE,SADT;AAEEC,MAAAA,GAAG,EAAE,GAFP;AAGEO,MAAAA,QAAQ,EAAEiB;AAHZ,KADQ,EAMR;AACEzB,MAAAA,KAAK,EAAE,sBADT;AAEEQ,MAAAA,QAAQ,EAAE,CACR;AAAER,QAAAA,KAAK,EAAE;AAAT,OADQ,EAER;AACEA,QAAAA,KAAK,EAAE,GADT;AAEEC,QAAAA,GAAG,EAAE,KAFP;AAGEO,QAAAA,QAAQ,EAAEiB;AAHZ,OAFQ;AAFZ,KANQ;AAFG,GAAf;AAsBA,QAAMI,UAAU,GAAG;AACjBvB,IAAAA,SAAS,EAAE,OADM;AAEjBN,IAAAA,KAAK,EAAE,QAFU;AAGjBQ,IAAAA,QAAQ,EAAEiB,WAHO;AAIjBxB,IAAAA,GAAG,EAAE;AAJY,GAAnB;AAOA,SAAO;AACL6B,IAAAA,IAAI,EAAE,UADD;AAELC,IAAAA,OAAO,EAAE,CACP,IADO,EAEP,QAFO,EAGP,KAHO,CAFJ;AAOLvB,IAAAA,QAAQ,EAAE,CACRoB,MADQ,EAER7B,WAFQ,EAGRU,IAHQ,EAIRU,IAJQ,EAKRC,MALQ,EAMRS,UANQ,EAORxB,IAPQ,EAQRD,eARQ,EASRW,IATQ,EAURJ,cAVQ;AAPL,GAAP;AAoBD;;AAEDqB,MAAM,CAACC,OAAP,GAAiBrC,QAAjB","sourcesContent":["/*\nLanguage: Markdown\nRequires: xml.js\nAuthor: John Crepezzi <john.crepezzi@gmail.com>\nWebsite: https://daringfireball.net/projects/markdown/\nCategory: common, markup\n*/\n\nfunction markdown(hljs) {\n  const regex = hljs.regex;\n  const INLINE_HTML = {\n    begin: /<\\/?[A-Za-z_]/,\n    end: '>',\n    subLanguage: 'xml',\n    relevance: 0\n  };\n  const HORIZONTAL_RULE = {\n    begin: '^[-\\\\*]{3,}',\n    end: '$'\n  };\n  const CODE = {\n    className: 'code',\n    variants: [\n      // TODO: fix to allow these to work with sublanguage also\n      { begin: '(`{3,})[^`](.|\\\\n)*?\\\\1`*[ ]*' },\n      { begin: '(~{3,})[^~](.|\\\\n)*?\\\\1~*[ ]*' },\n      // needed to allow markdown as a sublanguage to work\n      {\n        begin: '```',\n        end: '```+[ ]*$'\n      },\n      {\n        begin: '~~~',\n        end: '~~~+[ ]*$'\n      },\n      { begin: '`.+?`' },\n      {\n        begin: '(?=^( {4}|\\\\t))',\n        // use contains to gobble up multiple lines to allow the block to be whatever size\n        // but only have a single open/close tag vs one per line\n        contains: [\n          {\n            begin: '^( {4}|\\\\t)',\n            end: '(\\\\n)$'\n          }\n        ],\n        relevance: 0\n      }\n    ]\n  };\n  const LIST = {\n    className: 'bullet',\n    begin: '^[ \\t]*([*+-]|(\\\\d+\\\\.))(?=\\\\s+)',\n    end: '\\\\s+',\n    excludeEnd: true\n  };\n  const LINK_REFERENCE = {\n    begin: /^\\[[^\\n]+\\]:/,\n    returnBegin: true,\n    contains: [\n      {\n        className: 'symbol',\n        begin: /\\[/,\n        end: /\\]/,\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'link',\n        begin: /:\\s*/,\n        end: /$/,\n        excludeBegin: true\n      }\n    ]\n  };\n  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;\n  const LINK = {\n    variants: [\n      // too much like nested array access in so many languages\n      // to have any real relevance\n      {\n        begin: /\\[.+?\\]\\[.*?\\]/,\n        relevance: 0\n      },\n      // popular internet URLs\n      {\n        begin: /\\[.+?\\]\\(((data|javascript|mailto):|(?:http|ftp)s?:\\/\\/).*?\\)/,\n        relevance: 2\n      },\n      {\n        begin: regex.concat(/\\[.+?\\]\\(/, URL_SCHEME, /:\\/\\/.*?\\)/),\n        relevance: 2\n      },\n      // relative urls\n      {\n        begin: /\\[.+?\\]\\([./?&#].*?\\)/,\n        relevance: 1\n      },\n      // whatever else, lower relevance (might not be a link at all)\n      {\n        begin: /\\[.*?\\]\\(.*?\\)/,\n        relevance: 0\n      }\n    ],\n    returnBegin: true,\n    contains: [\n      {\n        // empty strings for alt or link text\n        match: /\\[(?=\\])/ },\n      {\n        className: 'string',\n        relevance: 0,\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        returnEnd: true\n      },\n      {\n        className: 'link',\n        relevance: 0,\n        begin: '\\\\]\\\\(',\n        end: '\\\\)',\n        excludeBegin: true,\n        excludeEnd: true\n      },\n      {\n        className: 'symbol',\n        relevance: 0,\n        begin: '\\\\]\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true\n      }\n    ]\n  };\n  const BOLD = {\n    className: 'strong',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /_{2}/,\n        end: /_{2}/\n      },\n      {\n        begin: /\\*{2}/,\n        end: /\\*{2}/\n      }\n    ]\n  };\n  const ITALIC = {\n    className: 'emphasis',\n    contains: [], // defined later\n    variants: [\n      {\n        begin: /\\*(?!\\*)/,\n        end: /\\*/\n      },\n      {\n        begin: /_(?!_)/,\n        end: /_/,\n        relevance: 0\n      }\n    ]\n  };\n\n  // 3 level deep nesting is not allowed because it would create confusion\n  // in cases like `***testing***` because where we don't know if the last\n  // `***` is starting a new bold/italic or finishing the last one\n  const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });\n  const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });\n  BOLD.contains.push(ITALIC_WITHOUT_BOLD);\n  ITALIC.contains.push(BOLD_WITHOUT_ITALIC);\n\n  let CONTAINABLE = [\n    INLINE_HTML,\n    LINK\n  ];\n\n  [\n    BOLD,\n    ITALIC,\n    BOLD_WITHOUT_ITALIC,\n    ITALIC_WITHOUT_BOLD\n  ].forEach(m => {\n    m.contains = m.contains.concat(CONTAINABLE);\n  });\n\n  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);\n\n  const HEADER = {\n    className: 'section',\n    variants: [\n      {\n        begin: '^#{1,6}',\n        end: '$',\n        contains: CONTAINABLE\n      },\n      {\n        begin: '(?=^.+?\\\\n[=-]{2,}$)',\n        contains: [\n          { begin: '^[=-]*$' },\n          {\n            begin: '^',\n            end: \"\\\\n\",\n            contains: CONTAINABLE\n          }\n        ]\n      }\n    ]\n  };\n\n  const BLOCKQUOTE = {\n    className: 'quote',\n    begin: '^>\\\\s+',\n    contains: CONTAINABLE,\n    end: '$'\n  };\n\n  return {\n    name: 'Markdown',\n    aliases: [\n      'md',\n      'mkdown',\n      'mkd'\n    ],\n    contains: [\n      HEADER,\n      INLINE_HTML,\n      LIST,\n      BOLD,\n      ITALIC,\n      BLOCKQUOTE,\n      CODE,\n      HORIZONTAL_RULE,\n      LINK,\n      LINK_REFERENCE\n    ]\n  };\n}\n\nmodule.exports = markdown;\n"]},"metadata":{},"sourceType":"script"}