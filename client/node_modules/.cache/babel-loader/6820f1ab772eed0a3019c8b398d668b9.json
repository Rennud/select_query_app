{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rennud\\\\Desktop\\\\select_query_app\\\\client\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState } from \"react\";\nimport hljs from \"highlight.js\";\n/* App function handle taking data from user input \r\nkeeps it as a state and via fecht sends it to BE\r\ndata should be basic select query (SQL syntax)\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /* Initialize State - default value empty STRING*/\n  const [input, setInput] = useState(\"\");\n  const html = hljs.highlightAuto({\n    input,\n    charAt: function (pos) {\n      throw new Error(\"Function not implemented.\");\n    },\n    charCodeAt: function (index) {\n      throw new Error(\"Function not implemented.\");\n    },\n    concat: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    indexOf: function (searchString, position) {\n      throw new Error(\"Function not implemented.\");\n    },\n    lastIndexOf: function (searchString, position) {\n      throw new Error(\"Function not implemented.\");\n    },\n    localeCompare: function (that) {\n      throw new Error(\"Function not implemented.\");\n    },\n    match: function (regexp) {\n      throw new Error(\"Function not implemented.\");\n    },\n    replace: function (searchValue, replaceValue) {\n      throw new Error(\"Function not implemented.\");\n    },\n    search: function (regexp) {\n      throw new Error(\"Function not implemented.\");\n    },\n    slice: function (start, end) {\n      throw new Error(\"Function not implemented.\");\n    },\n    split: function (separator, limit) {\n      throw new Error(\"Function not implemented.\");\n    },\n    substring: function (start, end) {\n      throw new Error(\"Function not implemented.\");\n    },\n    toLowerCase: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    toLocaleLowerCase: function (locales) {\n      throw new Error(\"Function not implemented.\");\n    },\n    toUpperCase: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    toLocaleUpperCase: function (locales) {\n      throw new Error(\"Function not implemented.\");\n    },\n    trim: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    length: 0,\n    substr: function (from, length) {\n      throw new Error(\"Function not implemented.\");\n    },\n    codePointAt: function (pos) {\n      throw new Error(\"Function not implemented.\");\n    },\n    includes: function (searchString, position) {\n      throw new Error(\"Function not implemented.\");\n    },\n    endsWith: function (searchString, endPosition) {\n      throw new Error(\"Function not implemented.\");\n    },\n    normalize: function (form) {\n      throw new Error(\"Function not implemented.\");\n    },\n    repeat: function (count) {\n      throw new Error(\"Function not implemented.\");\n    },\n    startsWith: function (searchString, position) {\n      throw new Error(\"Function not implemented.\");\n    },\n    anchor: function (name) {\n      throw new Error(\"Function not implemented.\");\n    },\n    big: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    blink: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    bold: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    fixed: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    fontcolor: function (color) {\n      throw new Error(\"Function not implemented.\");\n    },\n    fontsize: function (size) {\n      throw new Error(\"Function not implemented.\");\n    },\n    italics: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    link: function (url) {\n      throw new Error(\"Function not implemented.\");\n    },\n    small: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    strike: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    sub: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    sup: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    padStart: function (maxLength, fillString) {\n      throw new Error(\"Function not implemented.\");\n    },\n    padEnd: function (maxLength, fillString) {\n      throw new Error(\"Function not implemented.\");\n    },\n    trimEnd: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    trimStart: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    trimLeft: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    trimRight: function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    matchAll: function (regexp) {\n      throw new Error(\"Function not implemented.\");\n    },\n    \"__@iterator@302\": function () {\n      throw new Error(\"Function not implemented.\");\n    },\n    at: function (index) {\n      throw new Error(\"Function not implemented.\");\n    }\n  }).value;\n  /* Every time user change input function updates state value */\n\n  const handelOnChange = event => setInput(event.target.value);\n  /* Take data from user and send it to BE */\n\n\n  function sendQuery() {\n    /* Keeps actual input from user (It should be select query to db) */\n    const userInput = {\n      input\n    };\n    /* Use fetch to POST JSON-encoded data */\n\n    fetch(\"http://localhost:3001/api/get-data\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userInput)\n    }).then(response => response.json()).then(data => {\n      console.log(\"Success:\", data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"query\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"userQuery\",\n        className: \"input-query\",\n        onChange: handelOnChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn-query\",\n        onClick: sendQuery,\n        children: \"Get data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        className: \"sql\",\n        children: html\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"RL+Zbs2TIka0YpcBOJptmHqCgYA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Rennud/Desktop/select_query_app/client/src/App.tsx"],"names":["React","useState","hljs","App","input","setInput","html","highlightAuto","charAt","pos","Error","charCodeAt","index","concat","indexOf","searchString","position","lastIndexOf","localeCompare","that","match","regexp","replace","searchValue","replaceValue","search","slice","start","end","split","separator","limit","substring","toLowerCase","toLocaleLowerCase","locales","toUpperCase","toLocaleUpperCase","trim","length","substr","from","codePointAt","includes","endsWith","endPosition","normalize","form","repeat","count","startsWith","anchor","name","big","blink","bold","fixed","fontcolor","color","fontsize","size","italics","link","url","small","strike","sub","sup","padStart","maxLength","fillString","padEnd","trimEnd","trimStart","trimLeft","trimRight","matchAll","at","value","handelOnChange","event","target","sendQuery","userInput","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport hljs from \"highlight.js\";\r\n\r\n/* App function handle taking data from user input \r\nkeeps it as a state and via fecht sends it to BE\r\ndata should be basic select query (SQL syntax)\r\n*/\r\nexport default function App() {\r\n  /* Initialize State - default value empty STRING*/\r\n  const [input, setInput] = useState(\"\");\r\n  const html = hljs.highlightAuto({\r\n    input,\r\n    charAt: function (pos: number): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    charCodeAt: function (index: number): number {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    concat: function (...strings: string[]): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    indexOf: function (searchString: string, position?: number): number {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    lastIndexOf: function (searchString: string, position?: number): number {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    localeCompare: function (that: string): number {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    match: function (regexp: string | RegExp): RegExpMatchArray | null {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    replace: function (\r\n      searchValue: string | RegExp,\r\n      replaceValue: string\r\n    ): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    search: function (regexp: string | RegExp): number {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    slice: function (start?: number, end?: number): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    split: function (separator: string | RegExp, limit?: number): string[] {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    substring: function (start: number, end?: number): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    toLowerCase: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    toLocaleLowerCase: function (locales?: string | string[]): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    toUpperCase: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    toLocaleUpperCase: function (locales?: string | string[]): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    trim: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    length: 0,\r\n    substr: function (from: number, length?: number): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    codePointAt: function (pos: number): number | undefined {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    includes: function (searchString: string, position?: number): boolean {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    endsWith: function (searchString: string, endPosition?: number): boolean {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    normalize: function (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    repeat: function (count: number): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    startsWith: function (searchString: string, position?: number): boolean {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    anchor: function (name: string): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    big: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    blink: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    bold: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    fixed: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    fontcolor: function (color: string): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    fontsize: function (size: number): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    italics: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    link: function (url: string): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    small: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    strike: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    sub: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    sup: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    padStart: function (maxLength: number, fillString?: string): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    padEnd: function (maxLength: number, fillString?: string): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    trimEnd: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    trimStart: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    trimLeft: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    trimRight: function (): string {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    matchAll: function (regexp: RegExp): IterableIterator<RegExpMatchArray> {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    \"__@iterator@302\": function (): IterableIterator<string> {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n    at: function (index: number): string | undefined {\r\n      throw new Error(\"Function not implemented.\");\r\n    },\r\n  }).value;\r\n  /* Every time user change input function updates state value */\r\n  const handelOnChange = (event: {\r\n    target: { value: React.SetStateAction<string> };\r\n  }) => setInput(event.target.value);\r\n\r\n  /* Take data from user and send it to BE */\r\n  function sendQuery() {\r\n    /* Keeps actual input from user (It should be select query to db) */\r\n    const userInput = { input };\r\n    /* Use fetch to POST JSON-encoded data */\r\n    fetch(\"http://localhost:3001/api/get-data\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userInput),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Success:\", data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"query\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"userQuery\"\r\n          className=\"input-query\"\r\n          onChange={handelOnChange}\r\n        />\r\n        <button className=\"btn-query\" onClick={sendQuery}>\r\n          Get data\r\n        </button>\r\n      </div>\r\n      <pre>\r\n        <code className=\"sql\">{html}</code>\r\n      </pre>\r\n      {/* query DIV */}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}