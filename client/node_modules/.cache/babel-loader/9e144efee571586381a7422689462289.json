{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rennud\\\\Desktop\\\\select_query_app\\\\client\\\\src\\\\components\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Editor from \"./Editor\";\nimport DataTable from \"./DataTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /* SQL STATEMENT from user */\n  const [input, setInput] = useState(\"\");\n  /* Recieved data from BE - for purpose of Datatable */\n\n  const [data, setData] = useState([]);\n  /* Handling button text */\n\n  const [btnText, setBtnText] = useState(false);\n  const [isQuery, setIsQuery] = useState(true);\n  /* Take data from user and send it to BE */\n\n  function sendQuery() {\n    /* Keeps actual input from user (It should be select query to db) */\n    const userInput = {\n      input\n    };\n\n    if (input[0] !== \"S\") {\n      return setIsQuery(false);\n    }\n    /* If user once click on btn it sets permanently new text \r\n    after that text stays same until reload or reset*/\n\n\n    setBtnText(true);\n    /* Use fetch to POST JSON-encoded data */\n\n    fetch(\"http://localhost:3001/api/send-query\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userInput)\n    }).then(response => response.json()).then(data => {\n      setData(data);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }\n  /* Clean up editor + output - click on reset btn */\n\n\n  function cleanEditor() {\n    setInput(\"\");\n    setData([]);\n    setBtnText(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Editor, {\n      language: \"sql\",\n      value: input,\n      onChange: setInput,\n      sendQuery: sendQuery,\n      cleanEditor: cleanEditor,\n      btnText: btnText ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Spustit znovu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Spustit k\\xF3d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 50\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"V\\xFDsledek:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scroll\",\n        children: isQuery ? /*#__PURE__*/_jsxDEV(DataTable, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 22\n        }, this) : \"asdsad\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n/* NOTES \r\nHANDLE MORE THAN SELECT - You have made changes to the database. Rows affected: 1 func/ternary  */\n\n_s(App, \"jbixRV98NycL/z68MHqLlvBvN80=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Rennud/Desktop/select_query_app/client/src/components/App.tsx"],"names":["React","useState","Editor","DataTable","App","input","setInput","data","setData","btnText","setBtnText","isQuery","setIsQuery","sendQuery","userInput","fetch","method","headers","body","JSON","stringify","then","response","json","catch","error","console","cleanEditor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA;;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA;;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AAEA;;AACA,WAASY,SAAT,GAAqB;AACnB;AACA,UAAMC,SAAS,GAAG;AAAET,MAAAA;AAAF,KAAlB;;AAEA,QAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;AACpB,aAAOO,UAAU,CAAC,KAAD,CAAjB;AACD;AACD;AACJ;;;AACIF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA;;AACAK,IAAAA,KAAK,CAAC,sCAAD,EAAyC;AAC5CC,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFmC;AAG5CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf;AAHsC,KAAzC,CAAL,CAKGO,IALH,CAKSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EALtB,EAMGF,IANH,CAMSd,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KARH,EASGiB,KATH,CASUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACD,KAXH;AAYD;AAED;;;AACA,WAASE,WAAT,GAAuB;AACrBrB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,OAAO,CAAC,EAAD,CAAP;AACAE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,QAAQ,EAAC,KADX;AAEE,MAAA,KAAK,EAAEL,KAFT;AAGE,MAAA,QAAQ,EAAEC,QAHZ;AAIE,MAAA,SAAS,EAAEO,SAJb;AAKE,MAAA,WAAW,EAAEc,WALf;AAME,MAAA,OAAO,EACLlB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAP3C;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBACGE,OAAO,gBAAG,QAAC,SAAD;AAAW,UAAA,IAAI,EAAEJ;AAAjB;AAAA;AAAA;AAAA;AAAA,gBAAH,GAA+B;AADzC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;AAED;AACA;;GAlEwBH,G;;KAAAA,G","sourcesContent":["import React, { useState } from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport DataTable from \"./DataTable\";\r\n\r\nexport default function App() {\r\n  /* SQL STATEMENT from user */\r\n  const [input, setInput] = useState(\"\");\r\n  /* Recieved data from BE - for purpose of Datatable */\r\n  const [data, setData] = useState([]);\r\n  /* Handling button text */\r\n  const [btnText, setBtnText] = useState(false);\r\n\r\n  const [isQuery, setIsQuery] = useState(true);\r\n\r\n  /* Take data from user and send it to BE */\r\n  function sendQuery() {\r\n    /* Keeps actual input from user (It should be select query to db) */\r\n    const userInput = { input };\r\n\r\n    if (input[0] !== \"S\") {\r\n      return setIsQuery(false);\r\n    }\r\n    /* If user once click on btn it sets permanently new text \r\n    after that text stays same until reload or reset*/\r\n    setBtnText(true);\r\n    /* Use fetch to POST JSON-encoded data */\r\n    fetch(\"http://localhost:3001/api/send-query\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(userInput),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setData(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }\r\n\r\n  /* Clean up editor + output - click on reset btn */\r\n  function cleanEditor() {\r\n    setInput(\"\");\r\n    setData([]);\r\n    setBtnText(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Editor\r\n        language=\"sql\"\r\n        value={input}\r\n        onChange={setInput}\r\n        sendQuery={sendQuery}\r\n        cleanEditor={cleanEditor}\r\n        btnText={\r\n          btnText ? <span>Spustit znovu</span> : <span>Spustit kód</span>\r\n        }\r\n      />\r\n      <div className=\"scroll-container\">\r\n        <strong>Výsledek:</strong>\r\n        <div className=\"scroll\">\r\n          {isQuery ? <DataTable data={data} /> : \"asdsad\"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* NOTES \r\nHANDLE MORE THAN SELECT - You have made changes to the database. Rows affected: 1 func/ternary  */\r\n"]},"metadata":{},"sourceType":"module"}